#
# @lc app=leetcode id=924 lang=python3
#
# [924] Minimize Malware Spread
#
from typing import List

# @lc code=start
class UF:
    # S: O(n)
    def __init__(self, n: int):
        self.cnt = n
        self.parents = list(range(n))

        # Store how many nodes are connected to each node, 
        # which is used in connecting two nodes to avoid 
        # degration to linked list
        self.sizes = [1] * n

    # With rebalancing, T is O(log(n))
    def union(self, p: int, q: int) -> None:
        root_p, root_q = self.find(p), self.find(q)
        if root_p == root_q:
            # Already connected
            return

        # Rebalancing, avoid degration to linked list
        if self.sizes[root_p] > self.sizes[root_q]:
            self.parents[root_q] = root_p
            self.sizes[root_p] += self.sizes[root_q]
        else:
            self.parents[root_p] = root_q
            self.sizes[root_q] += self.sizes[root_p]

        self.cnt -= 1

    # With path compression, T can be reduced to O(1) eventually
    def find(self, p: int) -> int:
        while p != self.parents[p]:
            self.parents[p] = self.parents[self.parents[p]]
            p = self.parents[p]
        return p

class Solution:
    # T: O(n * log(n)) build UF
    # S: O(n)
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        N = len(graph)
        uf = UF(N)
        for i in range(N):
            for j in range(i + 1, N):
                if graph[i][j] == 1:
                    uf.union(i, j)

        area = [0] * N
        for i in range(N):
            area[uf.find(i)] += 1
        
        malware = [0] * N
        for i in initial:
            malware[uf.find(i)] += 1

        uninfected_after_removal = 0
        ans = N
        for i in initial:
            p = uf.find(i)
            # to maximize infected area, malware count should be 1
            if malware[p] == 1:
                if area[p] > uninfected_after_removal:
                    uninfected_after_removal = area[p]
                    ans = i
                elif area[p] == uninfected_after_removal:
                    ans = min(ans, i)  # keep smaller index

        # if removing doesn't help, remove the initial node with smallest index 
        return ans if uninfected_after_removal > 0 else min(initial)


# @lc code=end

